{"version":3,"sources":["CustomButton.js","Redux/Action.js","Info.js","App.js","serviceWorker.js","Redux/Reducer.js","Redux/store.js","index.js"],"names":["CustomButton","props","isRented","style","borderColor","disabled","onClick","User","Info","state","isModalEnable","bookInfo","name","Author","Owner","currenBook","handleSubmit","bind","handlebookSubmit","allHeaders","Object","keys","this","map","key","index","toUpperCase","push","event","setState","preventDefault","forEach","m","book","e","backgroundColor","color","padding","fontSize","width","marginLeft","marginTop","renderTableHeader","renderTableData","id","class","onSubmit","type","value","React","Component","App","isLoggedIn","password","nameList","FN","Email","PS","handleChange","target","className","onChange","Boolean","window","location","hostname","match","userInitialState","bookInitialState","createStore","combineReducers","user","action","payload","currentBook","composeWithDevTools","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be17d647.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction CustomButton(props)\r\n{\r\n\r\n    if(props.isRented)\r\n    return <button style={{borderColor:\"white\"}} disabled>Rent</button>\r\n\r\n    else\r\n    return <button style={{borderColor:\"white\"}} onClick={props.onClick} >Rent</button>\r\n}\r\n\r\nexport default CustomButton;","export const User= \"changeuser\";\r\nexport const UserLogin= \"changeuserlogin\";\r\nexport const BookInfo= \"bookInfo\";\r\n\r\nexport function ChangeUser(name, password)\r\n{\r\n  return {type: User , name: name,password: password }\r\n}\r\nexport function ChangeUserLogin(login)\r\n{\r\n  return {type: UserLogin , payload: login }\r\n}\r\nexport function ChangeBookInfo(isModalEnable, currentBook)\r\n{\r\n  return {type: BookInfo , isModalEnable: isModalEnable , currentBook: currentBook }\r\n}","import  React  from \"react\";\r\nimport \"./App.css\";\r\nimport CustomButton from  \"./CustomButton\";\r\nimport {connect} from \"react-redux\"\r\nimport {ChangeBookInfo} from \"./Redux/Action\"\r\n\r\nclass Info extends React.Component\r\n{\r\nconstructor(props)\r\n{\r\n    super(props);\r\n    this.state = {isModalEnable : false, bookInfo:  [{name :\"C#\" ,  Author : \"Yashvant  Kanetkar\",  Owner : \"A\"  , isRented :true},\r\n    {name :\"C++\" ,  Author : \"Yashvant  Kanetkar\",  Owner : \"B\"  , isRented :true},\r\n    {name :\"Java\" ,  Author : \"Yashvant  Kanetkar\",  Owner : \"D\"  , isRented :false},\r\n    {name :\"C\" ,  Author : \"Yashvant  Kanetkar\",  Owner : \"F\"  , isRented :false},\r\n    {name :\"Go\" ,  Author : \"Yashvant  Kanetkar\",  Owner : \"H\"  , isRented :true}] , currenBook: \"\"};\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handlebookSubmit = this.handlebookSubmit.bind(this);\r\n}\r\n\r\nrenderTableHeader() {\r\n    let header = Object.keys(this.state.bookInfo[0])\r\n    let allHeaders= header.map((key, index) => {\r\n       return <th key={index}>{key.toUpperCase()}</th>\r\n    });\r\n\r\n    allHeaders.push(<th key={\"Rent\"}>{\"Rent\".toUpperCase()}</th>)\r\n    return  allHeaders;\r\n }\r\n\r\n handleSubmit(name ,event) {\r\n    this.setState({isModalEnable : true  , bookInfo : this.state.bookInfo , currenBook: name });\r\n    event.preventDefault();\r\n  }\r\n\r\n  handlebookSubmit(event) {\r\n\r\n    this.state.bookInfo.forEach(m =>\r\n        {\r\n            if(m.name === this.state.currenBook)\r\n            {\r\n                m.isRented =  true;\r\n                return;\r\n            }\r\n        });\r\n    this.setState({isModalEnable : false  , bookInfo : this.state.bookInfo ,  currenBook: \"\" });\r\n    event.preventDefault();\r\n  }\r\n\r\n\r\n renderTableData() {\r\n    return this.state.bookInfo.map((book, index) => {\r\n       const {  name, Author, Owner  ,  isRented } = book //destructuring\r\n       return (\r\n          <tr key={name}>\r\n             <td>{name}</td>\r\n             <td>{Author}</td>\r\n             <td>{Owner}</td>\r\n             <td>{isRented ? \"Y\": \"N\"}</td>\r\n             <td><CustomButton isRented={isRented} onClick={(e) =>this.handleSubmit(name,e)}/></td>\r\n          </tr>\r\n       )\r\n    })\r\n }\r\n\r\nrender()\r\n{\r\nreturn (  \r\n\r\n        <div>\r\n        <h1 style={{backgroundColor :\"black\",color : \"white\" , padding : \"8px\" , fontSize : \"28px\" ,  width:\"88%\"}}>Welcome {this.props.name}</h1>\r\n        <div>\r\n            <h1 style = {{marginLeft: \"42%\" , marginTop:\"40px\"}}>All Books</h1>\r\n               <div style={{marginLeft: \"22%\", marginTop:\"20px\"}}>\r\n              <table>\r\n                 <tbody>\r\n                    <tr>{this.renderTableHeader()}</tr>\r\n                    {this.renderTableData()}\r\n                 </tbody>\r\n              </table>\r\n              </div>\r\n           {this.state.isModalEnable &&  <div id=\"myModal\" class=\"modal\">\r\n\r\n \r\n  <div class=\"modal-content\">\r\n          <form onSubmit={this.handlebookSubmit}>\r\n       <label>\r\n          Name:\r\n          <input type=\"text\"  value={this.props.name}  disabled/>\r\n        </label>\r\n        <label>\r\n          Book Name:\r\n          <input type=\"text\"  value={this.state.currenBook} disabled />\r\n        </label>\r\n        <label>\r\n          Duration:\r\n          <input type=\"text\" />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n</div>\r\n</div>\r\n           }\r\n</div>\r\n           </div>\r\n\r\n        );\r\n\r\n}\r\n}\r\n\r\nexport  default  Info;\r\n\r\n// class Info extends React.Component\r\n// {\r\n// constructor(props)\r\n// {\r\n//     super(props);\r\n//     this.props=props\r\n//     this.handleSubmit = this.handleSubmit.bind(this);\r\n//     this.handlebookSubmit = this.handlebookSubmit.bind(this);\r\n// }\r\n\r\n// renderTableHeader() {\r\n//     let header = Object.keys(this.props.bookInfo[0])\r\n//     let allHeaders= header.map((key, index) => {\r\n//        return <th key={index}>{key.toUpperCase()}</th>\r\n//     });\r\n\r\n//     allHeaders.push(<th key={\"Rent\"}>{\"Rent\".toUpperCase()}</th>)\r\n//     return  allHeaders;\r\n//  }\r\n\r\n//  handleSubmit(name ,event) {\r\n//    this.props.ChangeBookInfo(true,name);\r\n//     event.preventDefault();\r\n//   }\r\n\r\n//   handlebookSubmit(event) {\r\n\r\n//     this.props.bookInfo.forEach(m =>\r\n//         {\r\n//             if(m.name === this.props.currenBook)\r\n//             {\r\n//                 m.isRented =  true;\r\n//                 return;\r\n//             }\r\n//         });\r\n//    this.props.ChangeBookInfo(false,\"\");\r\n//     event.preventDefault();\r\n//   }\r\n\r\n\r\n//  renderTableData() {\r\n//     return this.props.bookInfo.map((book, index) => {\r\n//        const {  name, Author, Owner  ,  isRented } = book //destructuring\r\n//        return (\r\n//           <tr key={name}>\r\n//              <td>{name}</td>\r\n//              <td>{Author}</td>\r\n//              <td>{Owner}</td>\r\n//              <td>{isRented ? \"Y\": \"N\"}</td>\r\n//              <td><CustomButton isRented={isRented} onClick={(e) =>this.handleSubmit(name,e)}/></td>\r\n//           </tr>\r\n//        )\r\n//     })\r\n//  }\r\n\r\n// render()\r\n// {\r\n// return (  \r\n\r\n//         <div>\r\n//         <h1 style={{backgroundColor :\"black\",color : \"white\" , padding : \"8px\" , fontSize : \"28px\" ,  width:\"88%\"}}>Welcome {this.props.name}</h1>\r\n//         <div>\r\n//               <h1 style = {{textAlign:\"center\" , margin : \"80px 2px 0px 0px\"}}>All Books in BookShare App</h1>\r\n//               <div style={{margin: \"40px 0px 0px 440px\"}}>\r\n//               <table>\r\n//                  <tbody>\r\n//                     <tr>{this.renderTableHeader()}</tr>\r\n//                     {this.renderTableData()}\r\n//                  </tbody>\r\n//               </table>\r\n//               </div>\r\n//            {this.props.isModalEnable &&  <div id=\"myModal\" class=\"modal\">\r\n\r\n \r\n//   <div class=\"modal-content\">\r\n//           <form onSubmit={this.handlebookSubmit}>\r\n//        <label>\r\n//           Name:\r\n//           <input type=\"text\"  value={this.props.name}  disabled/>\r\n//         </label>\r\n//         <label>\r\n//           Book Name:\r\n//           <input type=\"text\"  value={this.props.currenBook} disabled />\r\n//         </label>\r\n//         <label>\r\n//           Duration:\r\n//           <input type=\"text\" />\r\n//         </label>\r\n//         <input type=\"submit\" value=\"Submit\" />\r\n//       </form>\r\n// </div>\r\n// </div>\r\n//            }\r\n// </div>\r\n//            </div>\r\n\r\n//         );\r\n\r\n// }\r\n// }\r\n\r\n// const mapStateToProps = (state, ownprops) => {\r\n//    return { name: ownprops.name, isModalEnable: state.book.isModalEnable, bookInfo: state.book.bookInfo , currenBook: state.book.currenBook}\r\n//  }\r\n \r\n//  const mapDispatchToProps = dispatch => {\r\n//    return {ChangeBookInfo: (n ,p) => dispatch(ChangeBookInfo(n,p))}\r\n//  }\r\n \r\n//  export default connect(mapStateToProps, mapDispatchToProps)(Info)\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Info from \"./Info\";\r\nimport {connect} from \"react-redux\"\r\nimport {ChangeUser, ChangeUserLogin} from \"./Redux/Action\"\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.isLoggedIn=false;\r\n    this.state = {name: '', password:''};\r\n    this.nameList = [{FN : \"Rahul Jaiswal\", Email: \"Rahul.Jaiswal@bentley.com\",PS : \"RJ\"},{FN : \"AB\", Email: \"Rahul.Jaiswal@bentley.com\"  , PS : \"CD\"}];\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const name =event.target.name;\r\n\r\n    this.setState({\r\n      [name]:  event.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n\r\n  this.isLoggedIn=false;\r\n  this.nameList.forEach(m =>\r\n    {\r\n      if(m.FN === this.state.name  &&  m.PS === this.state.password)\r\n         {\r\n          this.isLoggedIn=true;\r\n          this.setState({\r\n            name:  this.state.name , password: this.state.password\r\n         });\r\n         event.preventDefault();\r\n         return;\r\n         }\r\n        });  \r\n      }\r\n\r\n  render()\r\n  {\r\n    if(this.isLoggedIn)\r\n    {\r\n      return (<div><Info name= {this.state.name} nameList = { this.nameList} /> </div>);\r\n    }\r\n\r\n    else{\r\nreturn (\r\n<div>\r\n\r\n<h1 style={{backgroundColor :\"black\",color : \"white\" , padding : \"8px\" , fontSize : \"28px\" ,  width:\"88%\"}}>Welcome to BookShare App</h1>\r\n\r\n<div className=\"container\">\r\n<form onSubmit={this.handleSubmit}>\r\n       <label>\r\n          Name:\r\n          <input type=\"text\" name=\"name\"  value={this.state.name} onChange={this.handleChange} />\r\n        </label>\r\n        <label>\r\n          Password:\r\n          <input type=\"text\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n</div>\r\n\r\n  </div>\r\n   \r\n  );\r\n}\r\n}\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n// class App extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.props=props;\r\n//     this.handleChange = this.handleChange.bind(this);\r\n//     this.handleChange2 = this.handleChange2.bind(this);\r\n//     this.handleSubmit = this.handleSubmit.bind(this);\r\n//   }\r\n\r\n//   handleChange(event) {\r\n//     const name =event.target.value;\r\n//     this.props.ChangeUser(name, this.props.password)\r\n//   }\r\n//   handleChange2(event) {\r\n//     const password =event.target.value;\r\n//     this.props.ChangeUser(this.props.name, password)\r\n//   }\r\n\r\n//   handleSubmit(event) {\r\n//   this.props.ChangeUserLogin(false);\r\n//   this.props.nameList.forEach(m =>\r\n//     {\r\n//       if(m.FN === this.props.name  &&  m.PS === this.props.password)\r\n//          {\r\n//          this.props.ChangeUserLogin(true);\r\n//          this.forceUpdate();\r\n//          event.preventDefault();\r\n//          return;\r\n//          }\r\n//         });  \r\n//       }\r\n\r\n//   render()\r\n//   {\r\n//     if(this.props.isLoggedIn)\r\n//     {\r\n//       return (<div><Info name= {this.props.name} nameList = { this.props.nameList} /> </div>);\r\n//     }\r\n\r\n//     else{\r\n// return (\r\n// <div>\r\n\r\n// <h1 style={{backgroundColor :\"black\",color : \"white\" , padding : \"8px\" , fontSize : \"28px\" ,  width:\"88%\"}}>Welcome to BookShare App</h1>\r\n\r\n// <div className=\"container\">\r\n// <form onSubmit={this.handleSubmit}>\r\n//        <label>\r\n//           Name:\r\n//           <input type=\"text\" name=\"name\"  value={this.props.name} onChange={this.handleChange} />\r\n//         </label>\r\n//         <label>\r\n//           Password:\r\n//           <input type=\"text\" name=\"password\" value={this.props.password} onChange={this.handleChange2} />\r\n//         </label>\r\n//         <input type=\"submit\" value=\"Submit\" />\r\n//       </form>\r\n// </div>\r\n\r\n//   </div>\r\n   \r\n//   );\r\n// }\r\n// }\r\n// }\r\n\r\n// const mapStateToProps = state => {\r\n//   return {name: state.user.name, password: state.user.password , isLoggedIn: state.user.isLoggedIn, nameList: state.user.nameList}\r\n// }\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {ChangeUser: (n ,p) => dispatch(ChangeUser(n,p)) , ChangeUserLogin: (n) => dispatch(ChangeUserLogin(n))}\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(App)\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {BookInfo, User, UserLogin} from \"./Action\"\r\n\r\nconst userInitialState= {name: '', password:'', isLoggedIn: false, nameList: [{FN : \"Rahul Jaiswal\", Email: \"Rahul.Jaiswal@bentley.com\",PS : \"RJ\"},{FN : \"AB\", Email: \"Rahul.Jaiswal@bentley.com\"  , PS : \"CD\"}] };\r\n\r\nexport const userReducer = (state= userInitialState, action) =>\r\n{\r\nswitch(action.type)\r\n{\r\n  case User:\r\n    return {...state, name: action.name, password: action.password }\r\n  case UserLogin:\r\n    return {...state, isLoggedIn:action.payload }\r\n  default:\r\n    return state;\r\n}\r\n}\r\n\r\nexport  const  bookInitialState = {isModalEnable : false, \r\nbookInfo:  [\r\n{name :\"C#\" ,  Author : \"Yashvant  Kanetkar\",  Owner : \"A\"  , isRented :true},\r\n{name :\"C++\" ,  Author : \"Yashvant  Kanetkar\",  Owner : \"B\"  , isRented :true},\r\n{name :\"Java\" ,  Author : \"Yashvant  Kanetkar\",  Owner : \"D\"  , isRented :false},\r\n{name :\"C\" ,  Author : \"Yashvant  Kanetkar\",  Owner : \"F\"  , isRented :false},\r\n{name :\"Go\" ,  Author : \"Yashvant  Kanetkar\",  Owner : \"H\"  , isRented :true}],\r\ncurrenBook: \"\"};\r\n\r\nexport const bookReducer = (state= bookInitialState, action) =>\r\n{\r\nswitch(action.type)\r\n{\r\n  case BookInfo:\r\n    return {...state, isModalEnable: action.isModalEnable, currenBook: action.currentBook }\r\n  default:\r\n    return state;\r\n}\r\n}\r\n","import {applyMiddleware, createStore , combineReducers} from \"redux\"\r\nimport {userReducer , bookReducer} from \"./Reducer\"\r\nimport logger from \"redux-logger\"\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nexport const store= createStore(combineReducers({user: userReducer,book: bookReducer}) ,composeWithDevTools(applyMiddleware(logger)));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\"\r\nimport {store} from \"./Redux/store\"\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// ReactDOM.render(\r\n//   <Provider store={store}> <App /> </Provider>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}